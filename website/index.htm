<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>TinyVG</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <div class="body">
      <img class="logo" src="logo.svg">
      <p class="intro">An alternative binary encoded vector graphics format.</p>
      <h2>Why another format?</h2>
      <p><a href="https://www.w3.org/TR/SVG2/">SVG</a> is a horribly complex format and an overkill for most projects. The specification includes way too many edge cases so implementing a new SVG renderer will always have drawbacks or missing pieces.</p>
      <p>TinyVG tries to be simpler. Fewer features, but powerful enough to cover 90% of use cases.</p>
      <h2>Features</h2>
      <ul>
        <li>Compact binary encoding (39% size of a comparable SVG file on average)</li>
        <li>Comprehensible specification</li>
        <li>Paths, lines, rectangles</li>
        <li>Two-point gradient support</li>
        <li>Configurable precision for smaller files</li>
      </ul>
      <h2>Demo</h2>
      <p>The tiger is rendered with the current implementation of the TinyVG renderer:</p>
      <img class="image" src="img/tiger.png">
      <p>The <a href="https://dev.w3.org/SVG/tools/svgweb/samples/svg-files/tiger.svg">original SVG</a> is <b>96.719</b> byte large, while the optimized one is 85.806 byte large. When converted to TinyVG, the file shrinks to <b>27.522</b> byte. This means we only have <b>32%</b> size of the optimized source data.</p>
      <h2>Real World Data</h2>
      <p>TinyVG is benchmarked against a huge set of test images from <a href="https://github.com/Templarian/MaterialDesign">MaterialDesign</a>, <a href="https://github.com/PapirusDevelopmentTeam/papirus-icon-theme">Papirus</a>, <a href="https://dev.w3.org/SVG/tools/svgweb/samples/svg-files/">W3C</a>, <a href="https://github.com/ziglang/logo">Zig</a> and <a href="https://freesvg.org/">freesvg.org</a></p>
      <p>A short summary is that TVG is typically between 20% and 50% of the equivalent SVG file in size and <i>way easier</i> to parse or render.</p>
      <p><a href="benchmark.htm"><b>See the benchmark results</b></a></p>
      <h2>Resources</h2>
      <h3>Specification</h3>
      <p>The specification is a human-readable, informal description of the format. It should enable programmers to create new TinyVG implementations.</p>
      <ul>
        <li><a href="download/specification.pdf">PDF</a></li>
        <li><a href="download/specification.md">Markdown</a></li>
        <li><a href="https://github.com/MasterQ32/TinyVG/blob/master/documents/specification.md">Living Document (Markdown@GitHub)</a></li>
      </ul>
      <h3>Tooling</h3>
      <a href="https://github.com/MasterQ32/TinyVG/actions/workflows/nightly.yml"><img style="float: right" src="https://github.com/MasterQ32/TinyVG/actions/workflows/nightly.yml/badge.svg"></a>
      <p>The tools provide a TinyVG renderer as well as a text format converter for TinyVG text and SVG.</p>
      <ul>
        <li><a href="download/tvg-x86_64-windows.zip">Windows x86_64</a></li>
        <li><a href="download/tvg-x86_64-linux.zip">Linux x86_64</a></li>
        <li><a href="download/tvg-aarch64-linux.zip">Linux aarch64</a></li>
        <li><a href="download/tvg-x86_64-macos.zip">macOS x86_64</a></li>
        <li><a href="download/tvg-aarch64-macos.zip">macOS aarch64</a> (Missing <code>svg2tvgt</code>)</li>
      </ul>
      <h3>Native Library</h3>
      <p>The native library is suitable for integrating TinyVG into native projects. Be it <a href="">Zig</a>, <a href="">Rust</a>, C or C++, you can use this library with any language that supports the C ABI. This also includes <a href="">dotnet</a> via P/Invoke and Java via JNI. Right now, only a C API is provided, wrapping to other languages must be done manually at this time.</p>
      <p>The library provides means to render TinyVG to bitmaps, draw lists (polygons) and SVG.</p>
      <ul>
        <li><a href="">TinyVG SDK</a> (includes all supported platforms and examples)</li>
        <li><a href="">TinyVG Examples</a> (contains usage examples for different platforms and environments)</li>
        <li><a href="">TinyVG Library linux-x86_64</a></li>
        <li><a href="">TinyVG Library linux-aarch64</a></li>
        <li><a href="">TinyVG Library windows-x86_64</a></li>
        <li><a href="">TinyVG Library macos-x86_64</a></li>
        <li><a href="">TinyVG Library macos-aarch64</a></li>
      </ul>

      <h3>Polyfill</h3>
      <p>There's also a polyfill available that allows you to use TinyVG in the browser:</p>
      <ul>
        <li><a href="download/tvg-polyfill.zip">Polyfill Package</a></li>
        <li><a href="polyfill/index.htm">Online Demo</a></li>
      </ul>
      <h3>Example Data</h3>
      <p>Here you can download some TinyVG files to inspect or toy around with:
      <ul>
        <li>Tiger (<a href="img/tiger.tvg">TVG</a>, <a href="img/tiger.tvgt">TVGT</a>, <a href="img/tiger.svg">SVG</a>, <a href="img/tiger.png">PNG</a>)</li>
        <li>Shield Icon (<a href="img/shield.tvg">TVG</a>, <a href="img/shield.tvgt">TVGT</a>, <a href="img/shield.png">PNG</a>)</li>
      </ul>
      <h2>Contribution</h2>
      <p>The main work is done at <a href="https://github.com/MasterQ32/TinyVG">GitHub</a>, but feel free to send a email to <a href="mailto:contact@tinyvg.tech">contact@tinyvg.tech</a>.
    </div>
    <div class="page-end-spacer"></div>
  <body>
</html>